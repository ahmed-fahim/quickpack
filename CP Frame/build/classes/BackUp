import java.util.*;
import java.io.*;
import java.math.*;
import java.util.logging.Level;
import java.util.logging.Logger;


///Create a custom object that can be used as a custom data type in java 
///with the ability to apply built in sort() and other algorithm methods
///on the object
class Box implements Comparable<Box>{
    int x,y,z;
    public Box(){
        x=0;y=0;z=0;
    }
    public Box(int xx, int yy, int zz){
        x=xx;
        y=yy;
        z=zz;
    }
    
    ///In compareTo you write how you by default want 
    ///an array or arraylist of Box objects to be sorted
    ///Collections.sort(arraylist)
    ///or
    ///Array.sort(array)
    @Override
    public int compareTo(Box oth) {
        ///If compareTo is equivalent to "operator < "
        ///and we want to sort it increasingly with respect to x
        return this.x - oth.x;
    }
    
    
    ///to sort array,arraylist of Box according to 'y' value
    ///Collections.sort(arraylist,Box.Box_Y_comparator)
    ///or
    ///Array.sort(array, Box.Box_Y_comparator)
    public static Comparator<Box> Box_Y_comparator = new Comparator<Box>() {

        ///the method name compare cannot be changed
        ///its an abstract method kept in the comparator interface
        @Override
        public int compare(Box b1, Box b2) {
            return b1.y-b2.y;
        }

    };
    ///the same above thing can be written in lambda expression this following way
    /*
        public static Comparator<Box> Box_Y_comparator = (Box b1, Box b2) -> (b1.y-b2.y);
    */
    
    ///to enable printing for any custom object, just override toString()
    ///This way, you can simply System.out.print(Box_Object)
    @Override
    public String toString(){
        return ""+x+", "+y+", "+z+"\n";
    }
    

}



class Main {
    static Scanner cin;
    static PrintWriter cout;
    static void init_file(){
        try {
            cin=new Scanner(new BufferedReader(new FileReader(new File("inp.txt"))));
            cout=new PrintWriter(new File("outp.txt"));
        } catch (FileNotFoundException ex) {
           
        }
    }
    void HowToAugmentJavaCollections(){
        /*
        In order to have something like
        
        ********************DECLARATION************************
        map<string, vector<int> > mp; of C++
        
            into java, you need to do the following
        */

        TreeMap<String, ArrayList<Integer> > mp = new TreeMap<String, ArrayList<Integer> >();
        /*
        ***************ACCESSING & MODIFYING*******************
        let you have a key, val to enter in mp;
        in C++, you would have
        if(mp.find(key) != mp.end()){
            mp[key].push_back(val);
        }
        else{
            vector<int> tempList;
            tempList.push_back(val);
            mp[key]=tempList;
        }
        
        in Java, you do it this way
        */
        String key="Something";
        int val = 123;
        if(mp.containsKey(key) == true){
            mp.get(key).add(val);
        }
        else{
            ArrayList<Integer> tempList = new ArrayList<Integer>();
            tempList.add(val);
            mp.put(key,tempList);
        }
    }
    static void init_std(){
        cin=new Scanner(System.in);
        cout=new PrintWriter(System.out);
    }
    static <T> void resize(ArrayList<T> ob, int sz){
        for(int i=0;i<sz;i++){
            ob.add(null);
        }
    }
    static <T> void resize(ArrayDeque<T> ob, int sz){
        for(int i=0;i<sz;i++){
            ob.addLast(null);
        }      
    }
    static int On(int n, int k){
        return n|1<<k;
    }
    static long On(long n, long k){
        return n|1L<<k;
    }
    static int Off(int n, int k){
        if(check(n,k) == 1){
            return n-(1<<k);
        }
        else{
            return n;
        }
    }
    static long Off(long n, long k){
        if(check(n,k)==1){
            return n-(1L<<k);
        }
        else{
            return n;
        }
    }
    static int check(int n, int k){
        int res=n & (1<<k);
        return (res == 0) ? 0:1;
    }
    static int check(long n, long k){
        long res=n & (1L<<k);
        return (res == 0) ? 0:1;
    }
    public Main(){

        init_std();  
        //init_file();

    }
    public static void main(String[] args){
        new Main();
        cin.close();
        cout.close();
        ///write your code int Main()
        ///C++ map  = JAVA TreeMap
        ///C++ vector = JAVA ArrayList
        ///C++ set = JAVA TreeSet
        ///C++ unorderd_map = JAVA HashMap
        ///C++ bool = JAVA Boolean
        ///C++ deque = JAVA ArrayDequeue
        ///C++ priority_queue = PriorityQueue 
        
    }
}
